<?php

namespace IU\RedCapEtlModule;

use phpseclib\Crypt\RSA;
use phpseclib\Net\SCP;
use phpseclib\Net\SFTP;
use phpseclib\Net\SSH2;

class ServerConfig implements \JsonSerializable
{
    const EMBEDDED_SERVER_NAME = '(embedded server)';
    
    const AUTH_METHOD_SSH_KEY  = 0;
    const AUTH_METHOD_PASSWORD = 1;
    
    private $name;
    
    private $serverAddress; # address of REDCap-ETL server
    private $authMethod;
    private $username;
    private $password;
    private $sshKeyFile;
    private $sshKeyPassword;

    private $configDir;
    private $etlCommand;  # full path of command to run on REDCap-ETL server

    private $summaryEmail; # 0: don't send; 1: user option to send; 2: always send (if e-mail list defined)

    public function __construct($name)
    {
        $this->name = $name;
        
        $this->authMethod = self::AUTH_METHOD_SSH_KEY;
        $this->sshKeyPassword = '';
    }

    public function set($properties)
    {
        # Add validation!!!!
        
        foreach (get_object_vars($this) as $var => $value) {
            if (array_key_exists($var, $properties)) {
                $this->$var = $properties[$var];
            }
        }
    }
    
    public function jsonSerialize()
    {
        return (object) get_object_vars($this);
    }

    public function fromJson($json)
    {
        if (!empty($json)) {
            $object = json_decode($json);
            foreach (get_object_vars($this) as $var => $value) {
                $this->$var = $object->$var;
            }
        }
    }

    public function toJson()
    {
        $json = json_encode($this);
        return $json;
    }

    /**
     * Run the ETL process for this server.
     */
    public function run($etlConfig)
    {
        if (empty($this->serverAddress)) {
            throw new \Exeption('No server address specified.');
        }
        
        if ($this->authMethod == self::AUTH_METHOD_PASSWORD) {
            $ssh = new SSH2($this->serverAddress);
            $ssh->login($username, $this->password);
        } elseif ($this->authMethod == self::AUTH_METHOD_SSH_KEY) {
            $keyFile = $this->getSshKeyFile();
            
            if (empty($keyFile)) {
                throw new \Exception('No SSH key file found.');
            }
            
            \REDCap::logEvent('REDCap-ETL run key file: '.$keyFile);
            \REDCap::logEvent('REDCap-ETL run current user: '.get_current_user());
                        
            $key = new RSA();
            $key->setPassword($this->sshKeyPassword);
            
            $keyFileContents = file_get_contents($keyFile);
            
            if ($keyFileContents === false) {
                throw new \Exception('SSH key file "'.$keyFile.'" could not be accessed.');
            }
            $key->loadKey($keyFileContents);
            $ssh = new SSH2($this->serverAddress);
            $ssh->login($this->username, $key);
        } else {
            throw new \Exception('Unrecognized authentication method: '
                .$this->authMethod);
        }
                
        #------------------------------------------------
        # Copy configuration file and transformation
        # rules file (if any) to the server.
        #------------------------------------------------
        $fileNameSuffix = uniqid('', true);
        $scp = new SCP($ssh);
        
        /*
        $rulesFileName = '';
        $rulesFilePath = '';

        if (!$etlConfig->usesAutoGeneratedRules()) {
            $rulesFileName = 'etl_rules_'.$fileNameSuffix.'.txt';
            $rulesFilePath = $this->configDir.'/'.$rulesFileName;
            $rulesText = $etlConfig->getTransformationRulesText();

            $scpResult = $scp->put($rulesFilePath, $rulesText);
            if (!$scpResult) {
                throw new \Exception('Copy of transformation rules file to "'.$rulesFilePath.'" failed.');
            }
        }
        */
        
        #$propertiesText = $etlConfig->getRedCapEtlPropertiesText($rulesFileName);
        $propertiesJson = $etlConfig->getRedCapEtlJsonProperties();
        #$configFileName = 'etl_config_'.$fileNameSuffix.'.ini';
        $configFileName = 'etl_config_'.$fileNameSuffix.'.json';
        $configFilePath = $this->configDir.'/'.$configFileName;
        #$scpResult = $scp->put($configFilePath, $propertiesText);
        $scpResult = $scp->put($configFilePath, $propertiesJson);
        if (!$scpResult) {
            throw new \Exception('Copy of configuration file to "'.$configFilePath.'" failed.');
        }
        
        #$ssh->setTimeout(1);
        #$command = $this->getEtlCommand() . ' ' . $configFileName . ' ' . $rulesFileName;
        $command = $this->getEtlCommand() . ' ' . $configFilePath;
        \REDCap::logEvent('REDCap-ETL run command: '.$command);

        #$ssh->setTimeout(0.1);  # to prevent blocking
        $output = $ssh->exec($command);
        \REDCap::logEvent('REDCap-ETL run output: '.$output);
        
        return $output;
    }
    
    public function test()
    {
        \REDCap::logEvent('REDCap-ETL server config test.');
        
        $testOutput = '';
        try {
            $serverAddress = $this->getServerAddress();
            if (empty($serverAddress)) {
                throw new \Exception('No server address found.');
            }
            \REDCap::logEvent('REDCap-ETL server config test. Server address: '.$serverAddress);
                    
            $username = $this->getUsername();
            if ($this->getAuthMethod() == ServerConfig::AUTH_METHOD_SSH_KEY) {
                \REDCap::logEvent('REDCap-ETL server config test. SSH authentication method.');
                
                $keyFile = $this->getSshKeyFile();
                if (empty($keyFile)) {
                    throw new \Exception('SSH key file cound not be found.');
                }
                
                \REDCap::logEvent('REDCap-ETL server config test. SSH key file: '.$keyFile);
                            
                $keyPassword = $this->getSshKeyPassword();
                
                \REDCap::logEvent('REDCap-ETL server config test. SSH key password: '.$keyPassword);
                                
                $key = new RSA();
                
                #if (!empty($keyPassword)) {
                    $key->setPassword($keyPassword);
                #}
            
                $keyFileContents = file_get_contents($keyFile);
                if ($keyFileContents === false) {
                    throw new \Exception('SSH key file could not be accessed.');
                }
                $key->loadKey($keyFileContents);

                $ssh = new SSH2($serverAddress);
                $ssh->login($username, $key);
            } else {
                $password = $this->getPassword();
                
                $ssh = new SSH2($serverAddress);
                $ssh->login($username, $password);
            }

            $output = $ssh->exec('hostname');
            if (!$output) {
                $testOutput = "ERROR: ssh command failed.";
            } else {
                $testOutput = "SUCCESS:\noutput of hostname command:\n"
                    .$output."\n";
            }
        } catch (\Exception $exception) {
            $testOutput = 'ERROR: '.$exception->getMessage();
        }
        return $testOutput;
    }
    
    
    public function getName()
    {
        return $this->name;
    }
    
    public function setName($name)
    {
        $this->name = $name;
    }
    
    public function getServerAddress()
    {
        return $this->serverAddress;
    }
        
    public function getAuthMethod()
    {
        return $this->authMethod;
    }
    
    public function getUsername()
    {
        return $this->username;
    }
    
    public function getPassword()
    {
        return $this->password;
    }
        
    public function getSshKeyFile()
    {
        return $this->sshKeyFile;
    }
    
    public function getSshKeyPassword()
    {
        return $this->sshKeyPassword;
    }
        
    public function getConfigDir()
    {
        return $this->configDir;
    }
        
    public function getEtlCommand()
    {
        return $this->etlCommand;
    }
    
    public function getSummaryEmail()
    {
        return $this->summaryEmail;
    }
}
